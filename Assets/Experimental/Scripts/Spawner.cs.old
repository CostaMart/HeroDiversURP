using System.Collections;
using UnityEngine;
using UnityEngine.Events;
using Utility;

public class Spawner : MonoBehaviour
{
    [SerializeField] private string id = "spawner"; // Unique identifier for the spawner

    [Header("Spawn Settings")]
    [SerializeField] private GameObject[] prefabsToSpawn;
    [SerializeField] private Transform spawnContainer;
    [SerializeField] private int maxSpawnCount = 10;
    [SerializeField] private float spawnHeight = 0.5f;
    
    [Header("Timing Settings")]
    [SerializeField] private bool autoStart = true;
    [SerializeField] private float initialDelay = 0f;
    [SerializeField] private float spawnInterval = 2f;
    [SerializeField] private bool useRandomInterval = false;
    [SerializeField] private float minRandomInterval = 1f;
    [SerializeField] private float maxRandomInterval = 5f;
    
    [Header("Area Settings")]
    [SerializeField] private bool useRectangularArea = false;
    [SerializeField] private float circleRadius = 10f;
    [SerializeField] private float rectangleWidth = 20f;
    [SerializeField] private float rectangleLength = 20f;
    [SerializeField] private bool validateOnNavMesh = true;
    [SerializeField] private float navMeshSearchDistance = 5f;
    
    [Header("Events")]
    public UnityEvent<GameObject> OnObjectSpawned;
    public UnityEvent OnSpawningCompleted;
    
    private int currentSpawnCount = 0;
    private bool isSpawning = false;
    private Coroutine spawnRoutine;
    
    private void Start()
    {
        EntityManager.Instance.RegisterEntity(id, gameObject);
        if (autoStart)
        {
            StartSpawning();
        }
    }
    
    public void StartSpawning()
    {
        if (isSpawning) return;
        
        isSpawning = true;
        currentSpawnCount = 0;
        spawnRoutine = StartCoroutine(SpawnRoutine());
    }
    
    public void StopSpawning()
    {
        if (!isSpawning) return;
        
        isSpawning = false;
        if (spawnRoutine != null)
        {
            StopCoroutine(spawnRoutine);
            spawnRoutine = null;
        }
    }
    
    public void SpawnObject()
    {
        if (prefabsToSpawn == null || prefabsToSpawn.Length == 0)
        {
            Debug.LogWarning("Nessun prefab configurato per lo spawn.");
            return;
        }
        
        Vector3 spawnPosition = GetRandomPosition();
        int randomIndex = Random.Range(0, prefabsToSpawn.Length);
        GameObject prefabToSpawn = prefabsToSpawn[randomIndex];
        
        GameObject spawnedObject = Instantiate(prefabToSpawn, spawnPosition, Quaternion.identity);
        
        if (spawnContainer != null)
        {
            spawnedObject.transform.parent = spawnContainer;
        }
        
        OnObjectSpawned?.Invoke(spawnedObject);
        currentSpawnCount++;
    }
    
    public void SpawnObjectAtPosition(string id, Vector3 position)
    {
        if (prefabsToSpawn == null || prefabsToSpawn.Length == 0)
        {
            Debug.LogWarning("Nessun prefab configurato per lo spawn.");
            return;
        }
        
        int randomIndex = Random.Range(0, prefabsToSpawn.Length);
        GameObject prefabToSpawn = prefabsToSpawn[randomIndex];

        GameObject spawnedObject = Instantiate(prefabToSpawn, position, Quaternion.identity);
        spawnedObject.name = id; // Set the name to the provided ID
        
        if (spawnContainer != null)
        {
            spawnedObject.transform.parent = spawnContainer;
        }
        
        OnObjectSpawned?.Invoke(spawnedObject);
        currentSpawnCount++;
        EntityManager.Instance.RegisterEntity(id, spawnedObject);
    }
    
    private Vector3 GetRandomPosition()
    {
        Vector3 center = transform.position;
        
        RandomPointGenerator generator = new();
        if (useRectangularArea)
        {
            return generator.GetRandomPointInRectangle(
                center, rectangleWidth, rectangleLength, spawnHeight, 
                validateOnNavMesh, navMeshSearchDistance).Point;
        }
        else
        {
            return generator.GetRandomPoint(
                center, circleRadius, spawnHeight, 
                validateOnNavMesh, navMeshSearchDistance).Point;
        }
    }
    
    private IEnumerator SpawnRoutine()
    {
        yield return new WaitForSeconds(initialDelay);
        
        while (isSpawning && (maxSpawnCount <= 0 || currentSpawnCount < maxSpawnCount))
        {
            SpawnObject();
            
            float nextInterval = spawnInterval;
            if (useRandomInterval)
            {
                nextInterval = Random.Range(minRandomInterval, maxRandomInterval);
            }
            
            yield return new WaitForSeconds(nextInterval);
        }
        
        isSpawning = false;
        OnSpawningCompleted?.Invoke();
    }
    
    // Utility methods
    public void ResetSpawnCount()
    {
        currentSpawnCount = 0;
    }
    
    public int GetCurrentSpawnCount()
    {
        return currentSpawnCount;
    }
    
    // Debugging methods
    private void OnDrawGizmosSelected()
    {
        Gizmos.color = new Color(0.2f, 0.8f, 0.2f, 0.4f);
        
        if (useRectangularArea)
        {
            Gizmos.DrawCube(transform.position, new Vector3(rectangleWidth, 0.1f, rectangleLength));
        }
        else
        {
            Gizmos.DrawSphere(transform.position, circleRadius);
        }
    }
}